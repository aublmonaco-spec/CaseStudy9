---
title: "cs09: Weather Impacts on Buffalo Traffic"
subtitle: "Using Open Data APIs"
format: 
  html: default
editor: visual
---

## Data Sources

Two complementary datasets:

1.  Weather Data – NOAA’s Climate Data Online (CDO) API Provides daily temperature, rainfall, and snowfall from local weather stations.
2.  Traffic Incident Data – City of Buffalo’s Open Data Portal Contains daily reports of 911 and 311 calls, including traffic incidents.

```{r, message=FALSE, warning=FALSE}
library(httr)
library(jsonlite)
library(dplyr)
library(lubridate)
library(ggplot2)
library(tidyr)
library(knitr)
library(quarto)

# ==== USER SETTINGS ====
cdo_token <- "fiIVgrYYVdiXYBLIairHbbComGlDHqrM"

lat <- 42.8864
lon <- -78.8784
start_date <- "2024-10-01" 
end_date   <- "2025-03-31"

# ==== API CALL ====
data_url <- "https://www.ncei.noaa.gov/cdo-web/api/v2/data"
params <- list(
  datasetid = "GHCND",
  stationid = "GHCND:USW00014733",   # Buffalo Airport
  startdate = start_date,
  enddate = end_date,
  datatypeid = "TMIN,PRCP,SNOW",
  units = "metric",
  limit = 1000,
  Token = cdo_token
)
```

## Write the API Call Using httr

```{r, message=FALSE, warning=FALSE}

response <- GET(data_url, query = params, add_headers(Token = cdo_token)) %>%
  content(as = "text")

noaa <- fromJSON(response) 

noaa <- noaa$results

noaa <- noaa %>%
  mutate(date = as_date(noaa$date))

noaa_table <- noaa %>%
  pivot_wider(names_from = datatype, values_from = value)

noaa_table <- noaa_table %>%
  group_by(date) %>%
  summarise(across(everything(), na.omit)) %>%
  mutate(attributes = NULL)
 
noaa_table <- noaa_table[!duplicated(noaa_table), ]
kable(noaa_table[1:10, ], format = "pipe")

```
```{r}

ggplot(data = noaa_table) + geom_line(aes(x = date, y = SNOW), color = "darkgreen", linetype = "dashed") + geom_line(aes(x = date, y = TMIN), color = "darkblue")


```

```{r}

# ==== API CALL ====
socrata_url <- "https://data.buffalony.gov/resource/6at3-hpb5.json"
soc_params <- list(
  "$limit" = 5000,
  "$where" = 
  "report_date >= '2024-10-01' AND
  report_date <= '2025-03-31'"
)

traffic_res <- GET(socrata_url, query = soc_params) %>%
  content(as = "text")

traffic <- fromJSON(traffic_res) 

as_tibble(traffic)

kable(traffic[1:10, ], format = "pipe")

traffic <- traffic %>%
  mutate(date = as_date(report_date)) %>%
  group_by(date) %>%
  summarise(complaintid = n())

ggplot(traffic) + geom_line(aes(x = date, y = complaintid))
```

## Merge Weather and Traffic Data

```{r, message=FALSE, warning=FALSE}


weather_traffic <- noaa_table %>% left_join(traffic)

weather_traffic <- weather_traffic %>%
  replace_na(list(x = 0)) %>%
  mutate(date = as_date(date)) %>%
  mutate(weekday = wday(date, label = TRUE))

custom_breaks <- c(-1, 10, 50, 100, 150, 500)

weather_traffic <- weather_traffic %>%
  mutate(snow_cut = cut(SNOW, breaks = custom_breaks))

ggplot(weather_traffic) + geom_line(aes(x = date, y = complaintid), color = "red") + geom_line(aes(x = date, y = SNOW), color = "darkgreen", linetype = "dashed")
```

## Visual Exploration - Accidents vs. Weather

```{r}

weekday_box <- boxplot(complaintid~weekday, data = weather_traffic)

```

```{r}

snow_box <- boxplot(complaintid~snow_cut, data = weather_traffic)

```

```{r}

ggplot(data = weather_traffic, aes(x = SNOW, y = complaintid)) + geom_point(aes(color = weekday)) + geom_smooth(method = "lm")
```

```{r}
weather_traffic <- weather_traffic %>%
  mutate(log_precip = log1p(PRCP))

ggplot(data = weather_traffic, aes(x = PRCP, y = complaintid)) + geom_point(aes(color = weekday)) + geom_smooth(method = "lm") + xlim(c(0, 20))
```
## Fit a Linear Model
```{r}

lm_model <- lm(complaintid ~ SNOW + PRCP + weekday, data = weather_traffic)

tidy_model <- broom::tidy(lm_model)

kable(tidy_model, format = "pipe")
```

